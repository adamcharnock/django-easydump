{"name":"Django-easydump","body":"# At a glance #\r\n* Simply create database dumps no matter how large your database is (Django's `loaddata` and `dumpdata` commands choke on tables greater than a few thousand rows)\r\n* Customizable dumps that can exclude certain tables. Some tables contain static data which does not need to be backed up on the same schedule as, say, `UserProfile` data.\r\n* Automatic dump storage and retrieval.\r\n\r\n# How it works #\r\nWhen you run the `make_dump` command, the plugin makes a call to `pg_dump` (only postgres supported at this time), creates a compressed dump, then uploads it to an S3 bucket. It is recommended to only run this command on your production deployment. Preferably in a cron.\r\n\r\nWhen the `load_dump` command is called (it is recommended to only run this command on your local/qa/staging deployments), the app will download the latest dump from the bucket (based on the timestamp in the key), and will apply that database dump into the current database.\r\n\r\n# Installation #\r\n1. `pip install django-easydump`\r\n2. add to `INSTALLED_APPS`\r\n\r\n# Configuration #\r\nIn your settings, add three settings: `AWS_SECRET_KEY`, `AWS_ACCESS_KEY`, and `EASYDUMP_MANIFESTS`::\r\n\r\n    AWS_SECRET_KEY = ''\r\n    AWS_ACCESS_KEY = ''\r\n\r\n    EASYDUMP_MANIFESTS = {\r\n        'location': {\r\n            'database': 'default',\r\n            'include-models': 'Location',\r\n            's3-bucket': 'my_dump_bucket'\r\n        },\r\n        'default': {\r\n            'database': 'default',\r\n            'exclude-models': 'Location',\r\n            'extra-tables': ['django_deleted_model'],\r\n            's3-bucket': 'my_dump_bucket'\r\n        }\r\n    }\r\n    \r\n* `database` must match one in your `DATABASES` setting (old `DATABASE_` settings are not recognized)\r\n* `include-models` is a list of models that you want included in the dump (leave blank to include **all** models)\r\n* `exclude-models` are models you want to not have included in dumps. This setting is ignored if `include-models` is defined.\r\n* `extra-table` is a list of table names that do not correlate to a django model which you want included in the dump.\r\n* `s3-bucket` is the name of the bucket you want dumps to be saved to.\r\n* `reduced-redundancy` - When uploading dumps, if this value is `True`, it will save the file to S3 using the\r\n[reduced_redundancy](http://aws.amazon.com/about-aws/whats-new/2010/05/19/announcing-amazon-s3-reduced-redundancy-storage/) flag.\r\n\r\n# Usage #\r\n`python manage.py make_dump default`\r\n\r\nThis command will dump your database based on the ``default`` manifest in your settings and upload it to the S3 bucket.\r\n\r\n`python manage.py load_dump location`\r\n\r\nThis command will download the latest dump according to the `location` manifest from the S3 bucket and apply it to your database. Make sure you don't run this command on your production machine, it will overwrite data!!\r\n\r\n`python manage.py rotate_dumps default`\r\n\r\nThis will go through your bucket and remove all dumps except for ones performed on at 9PM on a monday. This command is to keep your S3 bucket from getting huge. In future versions, this command will be customizable.\r\n\r\n# Notes #\r\nPostgres/Postgis currently only supported. Mysql/Oracle/SQLite support coming soon.\r\n\r\n# Changelog #\r\n### v0.1.0 ###\r\n* initial release\r\n\r\n### v0.1.1 - v0.1.3 ##\r\n* small documentation fixed\r\n\r\n### v0.2.0 ###\r\n* added progress output for uploads/downloads\r\n* improved documentation\r\n\r\n### v0.2.1 ###\r\n* better documentation\r\n* added ability to specify `extra-tables` in manifest\r\n* got rid of `-d` option, now you just specify the dump manifest name.\r\n* added changelog to `README`","tagline":"Easily load database snapshots across deployments","google":"UA-501381-9","note":"Don't delete this file! It's used internally to help with page regeneration."}